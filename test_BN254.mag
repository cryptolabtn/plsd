// p:= 21888242871839275222246405745257275088548364400416034343698204186575808495617;
// q:= 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        
modulus:= 0x2523648240000001ba344d80000000086121000000000013a700000000000013;
order:= 0x2523648240000001ba344d8000000007ff9f800000000010a10000000000000d;
F:= GF(modulus);
A:= F!0;
B:= F!2;
E := EllipticCurve([A,B]);
// Gx:= p-1; Gy:=1;
Gx:= 0x2523648240000001ba344d80000000086121000000000013a700000000000012;
Gy:= 0x0000000000000000000000000000000000000000000000000000000000000001;
B1:=E![Gx,Gy];
//set u_i and s_t0
u_i:=[0xcb712d7f7070f1,0xcefb4e618bc737,0xa654ef52c06b79,0x9ceab8bec495f,0x3269965de1444d,0xe25f57bc6b482f,0xb0f88aa56c030c,0x9719049e4948f6,0x468a13519b80de,0x9efe457967743a];
s_t0:= 0xb8c6fa474c8165;

//test MaskingShard
res:=[];
for i in [1..10] do
    temp:=(s_t0*u_i[i])*B1;
    Append(~res, temp);
end for;

//test ShardsUpdate
//generate s_t1
s_t1:=52010273955080549;
res_update:=[];
temp := InverseMod(s_t0, modulus) * s_t1;
for i in [1..10] do
    // temp:=(s_t1*(-s_t0))*res[i];
    tempp :=  temp * res[i];
    Append(~res_update, tempp);
end for;

//test Token
token:= B1*InverseMod(s_t0, modulus);


